extends layout
block content
  script.
    $(document).ready(function() {
      function ajax_function(){
      var reqajax = $.ajax ({
        url: '/ext/getlasttxs/0.00000001',
        success: function( result ) {
          var extdata = result.data;
          extdata.sort(function(a,b){
            return a.blockindex - b.blockindex;//正序
          });
          AmCharts.makeChart("chartdiv", {
            "type": "serial",
            "theme": "black",
            "marginRight": 80,
            "dataProvider": result.data,
            "fill": "green",
            "borderColor": "green",
            "valueAxes": [{
              "position": "left",
              "axisColor": "green",
              "color": "green",
              "title": "区块难度",
              "titleColor": "#575757"
            }],
            "graphs": [{
              "id": "g1",
              "fillAlphas": 0.4,
              "valueField": "difficult",
              "lineColor": "green",
              "balloonText": "<div style='margin:5px; font-size:19px;'>难度值:<b> [[value]]</b></div>",   
              }
            ],
            "chartCursor": {
              "categoryBalloonDateFormat": "JJ:NN, DD MMMM",
              "cursorPosition": "mouse"
            },
            "categoryField": "blockindex",
            "categoryAxis": {
              "gridAlpha": 0,
              "position": "left",
              "labelsEnabled": true,
              "axisColor": "green",
              "color": "green",
              "gridColor": "green",
              "title": "区块高度",
              "titleColor": "#575757",
              "tickLength": 0
            },
            "chartScrollbar": {
              "graph": "g1",
              "oppositeAxis": false,
              "offset": 30,
              "scrollbarHeight": 50,
              "backgroundAlpha": 0,
              "selectedBackgroundAlpha": 0.1,
              "selectedBackgroundColor": "#888888",
              "graphFillAlpha": 0,
              "graphLineAlpha": 0.5,
              "selectedGraphFillAlpha": 0,
              "selectedGraphLineAlpha": 1,
              "autoGridCount": true,
              "color": "#AAAAAA"
            },
            "export": {
              "enabled": true,
            }
          });
        },
        error: function(){
          //alert('test');
        }
      });
      }
      ajax_function();
      setInterval( ajax_function, 60000 );
    });
  script.

    $(document).ready(function(){
       
      function tableBlockFilter(poolfilter) {
        ltable.api().search( poolfilter )
                   .draw();
        location.hash = "#blocksdetail";
      }

      var stable = $('#block-table').dataTable( {  
        autoWidth: true,      
        searching: true,
        ordering: false,
        responsive: true,
        lengthChange: false,
        processing: true,
        paging: false,
        info: false,
        ajax: {
          url: '/ext/summary',
          dataSrc: function ( json ) {
            //console.log('hello summary' + json.data);
            json.data[0]['height'] = "<a href='/block/" + json.data[0]['hash'] + "'>" + json.data[0]['height'] + "</a>";
            return json.data;
          }
        },
        columns: [
          { data: 'difficulty', width: '10%' },
          { data: 'supply', width: '15%' }
        ]
      });
      var rtable = $('#recent-table').dataTable( { 
          
        autoWidth: true,      
        searching: false,
        ordering: false,
        responsive: true,
        lengthChange: true,
        processing: true,
        ajax: {
            
          url: '/ext/getlasttxs/0.00000001',
          dataSrc: function ( json ) {
            for ( var i=0;i<json.data.length; i++ ) {
              json.data[i]['timestamp'] = new Date((json.data[i]['timestamp']) * 1000).toLocaleString();

              if (!json.data[i]['txid']) {
                json.data[i]['txid'] = "<em>no transactions</em>";
                json.data[i]['total'] = '';
                json.data[i]['recipients'] = '';
                json.data[i]['timestamp'] = '';
              } else {
                json.data[i]['blockindex'] = "<a href='/block/" + json.data[i]['blockhash'] + "'>" + json.data[i]['blockindex'] + "</a>";
                json.data[i]['txid'] = "<a href='/tx/" + json.data[i]['txid'] + "' class='mono'>" + json.data[i]['blockhash'] + "</a>";
            
                var amount = json.data[i]['total'] / 100000000;
                json.data[i]['total'] = amount.toFixed(6);
                json.data[i]['recipients'] = json.data[i]['vout'].length;
              }
            }
            return json.data;
          }
        },
        columns: [
          { data: 'blockindex', width: '15%' },
          { data: 'txid', width: '40%' },
          { data: 'recipients', width:'10%' },
          { data: 'total', width: '15%' },
          { data: 'timestamp', width: '15%' },
        ]
      });

      tablePerVersion = $('#perversiontable').dataTable( {
        data: [],
        paging: false,
        searching: false,
        columns: [
            { data: null, render: function ( data, type, row ) {
              return data.BlockVersionDesc;
            } },
            { data: null, render: function ( data, type, row ) {
              return data.Blocks;
            } },
            { data: null, render: function ( data, type, row ) {
              if ( type == 'sort' ) {
                return data.Amount;
              } else {
                return addCommas( data.Amount.toFixed(6) );
              }
            }, class: "right" }/*,
            { data: null, render: function ( data, type, row ) {
              if ( type == 'sort' ) {
                return data.RatioBlocksPayed;
              } else {
                return (Math.round( data.RatioBlocksPayed * 10000 ) / 100).toFixed(2) + '%';
              }
            } },
            { data: null, render: function ( data, type, row ) {
              if ( type == 'sort' ) {
                return data.RatioBlocksAll;
              } else {
                return (Math.round( data.RatioBlocksAll * 10000 ) / 100).toFixed(2) + '%';
              }
            } }*/
        ],
        createdRow: function ( row, data, index ) {
            //$('td',row).eq(2).css({"text-align": "right"});
            //$('td',row).eq(3).css({"text-align": "right"});
            //$('td',row).eq(4).css({"text-align": "right"});
            //$('td',row).eq(5).css({"text-align": "right"});
            /*console.log(data.BlockVersionDesc+' == '.maxblockversiondesc);
            if (data.BlockVersionDesc == maxblockversiondesc) {
              $('td',row).eq(0).css({"background-color": "#8FFF8F"});
              var color = '#8FFF8F';
              if (data.RatioBlocksPayedCorrectRatio < 0.25) {
                color = '#FF8F8F';
              } else if (data.RatioBlocksPayedCorrectRatio < 0.5) {
                color = '#ffcb8f';
              } else if (data.RatioBlocksPayedCorrectRatio < 0.75) {
                color = '#FFFF8F';
              }
              $('td',row).eq(6).css({"text-align": "right", "border": "2px solid red", "background-color": color, "font-weight": "bold"});
            }
            else {
                $('td',row).eq(0).css({});
              $('td',row).eq(6).css({"text-align": "right"});
            }*/
        }
    } );

    tablePerMiner = $('#perminertable').dataTable( {
        data: [],
        paging: true,
        lengthMenu: [ [20, 50, 100, -1], [20, 50, 100, "All"] ],
        pageLength: 20,
        order: [[ 1, "desc" ], [ 3, "desc" ]],
        fixedColumns:{
          rightColumns:2,
          leftColumns:3,
        },
        scrollX:true,
        autoWidth:true, 
        columns: [
            { data: null, render: function ( data, type, row ) {
              var outtxt = '';
              if (data.PoolName == '') {
                outtxt = data.PoolPubKey;
              } else {
                outtxt = data.PoolName;
              }
              return outtxt;
            } },
            { data: null, render: function ( data, type, row ) {
              return data.Blocks;
            } },
            { data: null, render: function ( data, type, row ) {
              if ( type == 'sort' ) {
                return data.RatioBlocksFound;
              } else {
                return (Math.round( data.RatioBlocksFound * 10000 ) / 100).toFixed(2) + '%';
              }
            } },
            /*{ data: null, render: function ( data, type, row ) {
              return data.BlocksPayed.toFixed(2);
            } },*/
            /*{ data: null, render: function ( data, type, row ) {
              if ( type == 'sort' ) {
                return data.RatioBlocksPayed;
              } else {
                return (Math.round( data.RatioBlocksPayed * 10000 ) / 100).toFixed(2)) + '%';
              }
            } },*/
            { data: null, render: function ( data, type, row ) {
              if ( type == 'sort' ) {
                return data.TotalAmount;
              } else {
                return data.TotalAmount.toFixed(6);
              }
            } }//,
            /*{ data: null, render: function ( data, type, row ) {
              if ( type == 'sort' ) {
                return data.MasternodeAmount;
              } else {
                return data.MasternodeAmount.toFixed(2);
              }
            } },*/
            /*{ data: null, render: function ( data, type, row ) {
              if ( type == 'sort' ) {
                return data.RatioMNPayments;
              } else {
                return (Math.round( data.RatioMNPayments * 1000 ) / 10).toFixed(1) + '%';
              }
            } },*/
            /*{ data: null, render: function ( data, type, row ) {
              if ( type == 'sort' ) {
                return data.RatioBlocksPayedToCurrentProtocol;
              } else {
                return (Math.round( data.RatioBlocksPayedToCurrentProtocol * 10000 ) / 100).toFixed(2) + '%';
              }
            } }*//*,
            { data: null, render: function ( data, type, row ) {
              if ( type == 'sort' ) {
                return data.RatioBlocksPayedCorrectly;
              } else {
                return (Math.round( data.RatioBlocksPayedCorrectly * 10000 ) / 100).toFixed(2) + '%';
              }
            } }*/
        ],
        createdRow: function ( row, data, index ) {
            if ( data.BlocksPayed == 0 ) {
              $('td',row).eq(0).css({"color": "#FF0000", "font-weight": "bold", 'cursor': 'pointer'});
            }
            else {
              $('td',row).eq(0).css({'cursor': 'pointer'});
            }
            $('td',row).eq(0).click(function(event) {
              console.log ( 'CLICK' );
              tableBlockFilter( $(event.target).text() );
            });
            //$('td',row).eq(1).css({"text-align": "right"});
            //$('td',row).eq(2).css({"text-align": "right"});
            //$('td',row).eq(3).css({"text-align": "right"});
            /*$('td',row).eq(4).css({"text-align": "right"});
            $('td',row).eq(5).css({"text-align": "right"});
            $('td',row).eq(6).css({"text-align": "right"});
            var color = '';
            if ( Math.round( data.RatioMNPayments * 100) == Math.round( data.RatioMNPaymentsExpected * 100) ) {
              color = '#8fff8f';
            }
            else if ( data.RatioMNPayments > 0.11 ) {
              color = '#ffff8f';
            }
            else if ( data.RatioMNPayments > 0 ) {
              color = '#ffcb8f';
            }
            else {
              color = '#ff8f8f';
            }
            $('td',row).eq(7).css({"text-align": "right", "background-color": color});
            if ( data.RatioBlocksPayedToCurrentProtocol == 1 ) {
              color = '#8fff8f';
            }
            else if ( data.RatioBlocksPayedToCurrentProtocol > 0 ) {
              color = '#ffff8f';
            }
            else {
              color = '#ff8f8f';
            }*/
            /*$('td',row).eq(8).css({"text-align": "right", "background-color": color});
            if ( data.RatioBlocksPayedCorrectly == 1 ) {
              color = '#8fff8f';
            }
            else if ( data.RatioBlocksPayedCorrectly > 0 ) {
              color = '#ffff8f';
            }
            else {
              color = '#ff8f8f';
            }
            $('td',row).eq(9).css({"text-align": "right", "background-color": color});*/
        }
    } );

      var ltable = $('#last24-table').dataTable( { 
                
        searching: false,
        ordering: false,
        responsive: true,
        lengthChange: true,
        processing: true,
        filter: true,  // 搜索栏
        searching: true,  
        fixedColumns:{
          rightColumns:2,
          leftColumns:3,
        },
        scrollX:true,
        autoWidth:false, 
        lengthMenu: [ [20, 70, 136, 1024, -1], ["20 (~1h)", "70 (~3h)", "136 (~6h)", "1024 (~12h)", "All (24h)"] ],
        pageLength: 20,
        order: [[ 0, "desc" ]],
        ajax: {
            
          url: '/data/blocks24h-0.json',
          type: 'GET',
          dataType: "json",
          dataSrc: function ( json ) {
            
            $('#globalsupplyamount').text( addCommas(json.data.stats.global.SupplyAmount.toFixed(6))+' ');
            //alert('11111');
            $('#globalmnamount').text( addCommas( json.data.stats.global.MNPaymentsAmount.toFixed(6))+' ');
            
            $('#globalpayed').text( (Math.round( json.data.stats.global.RatioBlocksPayed * 10000 ) / 100) +'%' );
            $('#globalcorrectlypayed').text( (Math.round( json.data.stats.global.RatioBlocksPayedCorrectly * 10000 ) / 100) +'%' );
            $('#globalcurrentmnratio').text( 99 );
            
            var dataProtocolDesc = [];
            // Fill per version stats table
            for (var protocol in json.data.stats.protocoldesc){
              if(!json.data.stats.protocoldesc.hasOwnProperty(protocol)) {
                continue;
              }
              dataProtocolDesc[protocol] = json.data.stats.protocoldesc[protocol];
            }
            
            tablePerVersion.api().clear();
            maxblockversion = -1;
            for (var blockversion in json.data.stats.perversion){
              if (blockversion > maxblockversion) {
                maxblockversion = blockversion;
              }
            }
            maxblockversiondesc = json.data.stats.perversion[maxblockversion].BlockVersionDesc;
            
            for (var blockversion in json.data.stats.perversion){
              if(!json.data.stats.perversion.hasOwnProperty(blockversion)) {continue;}
                tablePerVersion.api().row.add( json.data.stats.perversion[blockversion] );
            }
            tablePerVersion.api().draw();
            
            // Fill per miner stats table
            tablePerMiner.api().clear();
            var tempObj = [];
            for (var poolpubkey in json.data.stats.perminer){
              if(!json.data.stats.perminer.hasOwnProperty(poolpubkey)) {continue;}
              tempObj = json.data.stats.perminer[poolpubkey];
              tempObj['PoolPubKey'] = "<a href='/address/" + poolpubkey + "'>" + poolpubkey + "</a>";
              tablePerMiner.api().row.add( tempObj );
            }
            tablePerMiner.api().draw();
            
            // Change the last refresh date
            
            var date = new Date();
            var n = date.toDateString();
            var time = date.toLocaleTimeString();
            $('#blockstableLR').text( n + ' ' + time );
            
            json.data = json.data.blocks;
            for ( var i=0;i<json.data.length; i++ ) {
              json.data[i]['datefound'] = new Date((json.data[i]['BlockTime']) * 1000).toLocaleString();
              json.data[i]['BlockId'] = "<a href='/block/" + json.data[i]['BlockHash'] + "'>" + json.data[i]['BlockId'] + "</a>";
              json.data[i]['BlockHash'] = json.data[i]['TxId'] = "<a href='/tx/" + json.data[i]['TxId'] + "' class='mono'>" + json.data[i]['BlockHash'] + "</a>";
              //"<a href='/block/" + json.data[i]['TxId'] + "'>" + json.data[i]['BlockHash'] + "</a>";
              //json.data[i]['BlockPoolPubKey'] = "<a href='/address/" + json.data[i]['BlockPoolPubKey'] + "'>" + json.data[i]['BlockPoolPubKey'] + "</a>";
              //json.data[i]['BlockMNPayee'] = "<a href='/address/" + json.data[i]['BlockMNPayee'] + "'>" + json.data[i]['BlockMNPayee'] + "</a>";
              json.data[i]['BlockSupplyValue'] = json.data[i]['BlockSupplyValue'].toFixed(6);
              json.data[i]['BlockDifficulty'] = json.data[i]['BlockDifficulty'].toFixed(6);
            }
            
            return json.data;
          },
          cache: true
        },
        columns: [
          { data: 'datefound', width: '10%' },
          { data: 'BlockId', width: '10%' },
          { data: 'BlockHash', width: '10%' },/*
          { data: null, render: function ( data, type, row ) {
               var outtxt = data.BlockPoolPubKey;
               if (data.PoolDescription) {
                 outtxt = data.PoolDescription;
               }
               return outtxt;
            }, width: '20%' },*/
          { data: 'BlockDifficulty', width: '10%' },
          { data: 'BlockSupplyValue', width: '10%' },
          /*{ data: 'BlockMNValue', width: '10%' },
          { data: 'mnpaymentratio', width: '10%' },
          { data: 'BlockMNPayee', width: '10%' }*/
        ]
      });

      setInterval( function () {
        rtable.api().ajax.reload(null, false);
        stable.api().ajax.reload(null, false);
        ltable.api().ajax.reload(null, false);
      }, 60000 );
    });
      
  <div class="row"><div class="col-md-offset-5 col-md-2"><label>近期区块难度变化图</label></div><div class="col-md-offset-5"></div><div class="col-md-offset-1 col-md-10"><div id="chartdiv" style="width: 100%; height: 300px;></div></div></div>
  
  .row
    .col-md-12
      if error !== null        
        .alert.alert-danger.alert-dismissable(role='alert')
          button.close(type='button', data-dismiss='alert') ×
          strong #{settings.locale.ex_error} : #{error}
      if warning !== null        
        .alert.alert-warning.alert-dismissable(role='alert')
          button.close(type='button', data-dismiss='alert') ×
          strong #{settings.locale.ex_warning} #{warning}
  
  .col-md-12
    .panel.panel-default
      .panel-heading
        strong #{settings.locale.ex_latest_transactions}
      table#recent-table.table.table-bordered.table-striped
        thead
          tr
            if settings.baseType === 'ripple'
              th.text-center #{settings.locale.ex_ledger}
            else
              th.text-center #{settings.locale.ex_block}
            th.hidden-xs.text-center #{settings.locale.block_hash}
            th.hidden-xs.text-center #{settings.locale.tx_recipients}
            th.text-center #{settings.locale.mkt_amount} (#{settings.symbol})
            th.text-center #{settings.locale.timestamp}
        tbody.text-center
    .footer-padding

  //<div class="row"><h2> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近24小时</h2><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近24小时总发行: <span id="globalsupplyamount" style="font-weight: bold;">????.?????? </span> .</p></div>

  
  
  .col-md-12
    .panel.panel-default
      .panel-heading
        strong #{settings.locale.perversionlast24h}
      //table#perversiontable.table.table-striped.table-condensed.table-responsive.text-nowrap
      table#perversiontable.table.table-striped
        thead
          tr
            th.hidden-xs.text-center #{settings.locale.blockversion}
            th.hidden-xs.text-center #{settings.locale.blocknum}
            th.hidden-xs.text-center #{settings.locale.mkt_amount}
            //th.hidden-xs.text-center #{settings.locale.paidblocksratio}
            //th.hidden-xs.text-center #{settings.locale.allblocks}
        tbody.text-center
    .footer-padding

  //<div class="col-md-12"><h2 id="perminer">#{settings.locale.minerstatistics}</h2><p>#{settings.locale.minernote}</p><div class="table-responsive"><table class="table table-striped"><thead><tr><th>#{settings.locale.minerproblem}</th><th>#{settings.locale.minersolution}</th></tr></thead><tbody><tr><td style="color:#FF0000; font-weight: bold">#{settings.locale.minernameisred}</td><td>#{settings.locale.minerupdatenote} :<br/><ul><li>#{settings.locale.minerupdate1} </li><li>#{settings.locale.minerupdate2}</li></ul>#{settings.locale.minerupdateremark}</td></tr><tr><td style="background-color:#FF8f8F">#{settings.locale.redbackground}</td><td>#{settings.locale.redbackgroundnote} </td></tr><tr><td style="background-color:#FFcb8f">#{settings.locale.orangebackground}</td><td>#{settings.locale.orangebackgroundnote}</td></tr><tr><td style="background-color:#FFFF8f">#{settings.locale.yellowbackground}</td><td>#{settings.locale.yellowbackgroundnote}</td></tr></tbody></table><p><u>#{settings.locale.updatefailedremark}:</u> #{settings.locale.updatefailedremarknote}</p></div>

  .col-md-12
    .panel.panel-default
      .panel-heading
        strong #{settings.locale.minerdetail}
      table#perminertable.table.table-striped.table-condensed.table-responsive.text-nowrap
        thead
          tr
            th.hidden-xs.text-center #{settings.locale.miner}
            th.hidden-xs.text-center #{settings.locale.blocksfound}
            th.hidden-xs.text-center #{settings.locale.foundratio}
            //th.hidden-xs.text-center #{settings.locale.blocksmnpayed}
            //th.hidden-xs.text-center #{settings.locale.blocksmnpayedratio}
            th.hidden-xs.text-center #{settings.locale.totalsupply}
            //th.hidden-xs.text-center #{settings.locale.minermnpayment}
            //th.hidden-xs.text-center #{settings.locale.minermnpaymentratio}
            //th.hidden-xs.text-center #{settings.locale.payedtolastversion}
            //th.hidden-xs.text-center #{settings.locale.payedcorrectly}
        tbody.text-center
    .footer-padding

  .col-md-12
    .panel.panel-default
      .panel-heading
        strong #{settings.locale.last24blocks}
      table#last24-table.table.table-striped.table-condensed.table-responsive.text-nowrap
        thead
          tr
            th.hidden-xs.text-center #{settings.locale.datefound}
            th.hidden-xs.text-center #{settings.locale.ex_block}
            th.hidden-xs.text-center #{settings.locale.block_hash}
            th.hidden-xs.text-center #{settings.locale.difficulty}
            th.hidden-xs.text-center #{settings.locale.blockamount}
            //th.hidden-xs.text-center #{settings.locale.mnpayment}
            //th.hidden-xs.text-center #{settings.locale.mnpaymentratio}
            //th.hidden-xs.text-center #{settings.locale.mnpayee}
            //th.hidden-xs.text-center #{settings.locale.mnversion}
        tbody.text-center
    .footer-padding
      
              
