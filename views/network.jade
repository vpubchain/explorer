extends layout

block content   
  script.
    $(document).ready(function(){
      var ctable = $('#connections-table').dataTable( {  
        autoWidth: true,      
        searching: false,
        ordering: false,
        responsive: true,
        lengthChange: true,
        processing: true,
        ajax: {
          url: '/ext/connections',
          dataSrc: function ( json ) {
            return json.data;
          }
        },
        columns: [
          { data: 'address', width: '25%' },
          { data: 'protocol', width: '25%' },
          { data: 'version', width:'25%' },
          { data: 'country', width: '25%'}
        ]
      });

      var ntable = $('#nodes-table').dataTable( {  
        autoWidth: true,      
        //searching: false,
        ordering: false,
        responsive: true,
        lengthChange: true,
        processing: true,
        filter: true,  // 搜索栏
        searching: true, 
        ajax: {
          url: '/bitcoin/api/nodes',
          dataSrc: function ( json ) {
            var res = {data:[]};
            for(var key in json.nodes) {
              var item = {'address':'','useragent':'',hight:0, 'location': '','city':'','network':'','time':'','rtt':''};
              item.address = key;
              var arr = json.nodes[key];//json.nodes[key].toString().split(',');
              item.useragent = arr[1] + '<br>' + arr[0];
              item.hight = arr[4];
              item.location = arr[21];//json.nodes[key][13].country;
              item.city = arr[20];//json.nodes[key][13].city;
              item.network = arr[12] + '<br>' + arr[11];
              item.time = new Date((arr[2]) * 1000).toLocaleString();
              item.rtt = arr[13];
              res.data.push(item);
            }
            return res.data;
          }
        },
        columns: [
          { data: 'time', width: '10%' },
          { data: 'address', width: '20%' },
          { data: 'useragent', width: '10%' },
          { data: 'hight', width:'10%' },
          { data: 'location', width:'10%' },
          { data: 'city', width:'10%' },
          { data: 'network', width: '20%'},
        ]
      });

      var coldwallettable = $('#cold-wallet-nodes-table').dataTable( {  
        autoWidth: true,      
        //searching: false,
        ordering: false,
        responsive: true,
        lengthChange: true,
        processing: true,
        filter: true,  // 搜索栏
        searching: true, 
        ajax: {
          url: '/ext/getcoldstakingnodeslist',
          dataSrc: function ( json ) {
            //alert(json.data.length);
            var res = {data:[]};
            for(var i = 0; i < json.data.length; i++)
            {
              var item = {'address':'', rewards:0, balance:0, stakeaddress:'', stakevalue:0};
              item.address = "<a href='/address/" + json.data[i].address + "'>" + json.data[i].address + "</a>";
              item.rewards = json.data[i].rewards;
              //item.balance = json.data[i].balance;
              item.stakeaddress = json.data[i].stakeaddress;
              item.stakevalue = json.data[i].stakevalue;

              res.data.push(item);
            }
            
            return res.data;
          }
        },
        columns: [
          { data: 'address', width: '40%' },
          { data: 'stakeaddress', width: '20%' },
          { data: 'rewards', width: '20%' },
          { data: 'stakevalue', width: '20%' },
          //{ data: 'balance', width: '20%' },
        ]
      });

      var coldstakingtable = $('#cold-staking-nodes-table').dataTable( {  
        autoWidth: true,      
        //searching: false,
        ordering: false,
        responsive: true,
        lengthChange: true,
        processing: true,
        filter: true,  // 搜索栏
        searching: true, 
        ajax: {
          url: '/ext/stakingnodes',
          dataSrc: function ( json ) {
            var res = {data:[]};
            //alert(json.data.length);
            for(var i = 0; i < json.data.length; i++)
            {
              var itemdata = json.data[i];
              var item = {'address':'','useragent':'',height:0, 'location': '','city':'','network':'','time':'','rtt':'','stakingcoin':''};
              item.address = itemdata.address;
              item.useragent = itemdata.version + '<br>' + itemdata.protocol;
              item.height = itemdata.height;
              item.location = itemdata.country;//json.nodes[key][13].country;
              item.city = itemdata.city;//json.nodes[key][13].city;
              item.network = itemdata.network + '<br>' + itemdata.asns;
              item.time = new Date((itemdata.time) * 1000).toLocaleString();
              item.rtt = 0;
              item.stakingcoin = (itemdata.stakingcoin).toFixed(6);
              //alert(item.time);
              res.data.push(item);
            }
            return res.data;
          }
        },
        columns: [
          { data: 'time', width: '10%' },
          { data: 'address', width: '20%' },
          { data: 'useragent', width: '10%' },
          { data: 'height', width:'10%' },
          { data: 'location', width:'10%' },
          { data: 'city', width:'10%' },
          { data: 'network', width: '20%'},
          { data: 'stakingcoin', width: '10%'},
        ]
      });

      function ajax_function()
      {
        var reqajax = $.ajax ({
          url: '/bitcoin/api/nodes',
          success: function( res ) {
            var myMapCharts = echarts.init(document.getElementById('mapChart'));
            var agents = res.agents;
            var countrys = res.countrys;
            var networks = res.networks;
            var nodes = res.nodes;
            var nodes_data = [];
            var items = [];
            
            for(var item in nodes){
              node_location = [];
              node_data = {};
              items = nodes[item];
              node_location.push(items[9]);
              node_location.push(items[8]);
              node_location.push(10);
              //node_location.push(items[13]);
              node_data.name = items[20];
              node_data.value = node_location;
              nodes_data.push(node_data);
            }
            option = {
              backgroundColor: '#303030',
              title: {
                text: '#{settings.locale.livemapcrawler}',
                subtext: '',
                sublink: '',
                left: 'left',
                top: 5,
                itemGap: 0,
                textStyle: {
                    color: '#eee'
                },
                z: 200
              },
            tooltip: {
                trigger: 'item',
                formatter: function (params) {
                    var value = (params.value + '').split('.');
                    //value = value[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,');
                    value = value[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') + '.' + value[1];
                    //return params.seriesName + '<br/>' + params.name + ' : ' + value;
                    return params.name + ' : ' + value;
                    //return city;
                }
            },
            toolbox: {
                show: true,
                left: 'right',
                iconStyle: {
                    normal: {
                        borderColor: '#ddd'
                    }
                },
                feature: {
                },
                z: 202
            },
            brush: {
                geoIndex: 0,
                brushLink: 'all',
                inBrush: {
                    opacity: 1,
                    symbolSize: 14
                },
                outOfBrush: {
                    color: '#000',
                    opacity: 0.2
                },
                z: 10
            },
            geo: {
                map: 'world',
                //map: 'china',
                silent: true,
                label: {
                    emphasis: {
                        show: false,
                        areaColor: '#eee'
                    }
                },
                itemStyle: {
                    normal: {
                        borderWidth: 0.2,
                        borderColor: '#404a59'
                    }
                },
                left: '0%',
                top: 40,
                bottom: '0%',
                right: '0%',
                roam: true
            },
            //: makeParallelAxis(schema),
            grid: [{
                show: true,
                left: 0,
                right: 0,
                top: '100%',
                bottom: 0,
                borderColor: 'transparent',
                backgroundColor: '#404a59',
                z: 99
            }],
            parallel: {
                top: '100%',
                left: 0,
                right: 0,
                bottom: 0,
                axisExpandable: true,
                axisExpandCenter: 15,
                axisExpandCount: 10,
                axisExpandWidth: 60,
                axisExpandTriggerOn: 'mousemove',

                z: 100,
                parallelAxisDefault: {
                    type: 'value',
                    nameLocation: 'start',
                    nameRotate: 25,
                    // nameLocation: 'end',
                    nameTextStyle: {
                        fontSize: 12
                    },
                    nameTruncate: {
                        maxWidth: 170
                    },
                    nameGap: 20,
                    splitNumber: 3,
                    tooltip: {
                        show: true
                    },
                    axisLine: {
                        // show: false,
                        lineStyle: {
                            width: 1,
                            color: 'rgba(255,255,255,0.3)'
                        }
                    },
                    axisTick: {
                        show: false
                    },
                    splitLine: {
                        show: false
                    },
                    z: 100
                }
            },
            series: [
            {
                name: 'Phore node',
                //type: 'scatter',
                type: 'effectScatter',
                legendHoverLink:true,       //是否启用图例 hover 时的联动高亮。
                hoverAnimation:true,        //是否开启鼠标 hover 的提示动画效果。
                effectType:"ripple",        //特效类型，目前只支持涟漪特效'ripple'。
                showEffectOn:"render",      //配置何时显示特效。可选：'render' 绘制完成后显示特效。'emphasis' 高亮（hover）的时候显示特效。
                rippleEffect:{              //涟漪特效相关配置。
                    period:4,               //动画的时间。
                    scale:4,              //动画中波纹的最大缩放比例。
                    brushType:'fill',      //波纹的绘制方式，可选 'stroke' 和 'fill'。
                },
                coordinateSystem: 'geo',
                //symbolSize: 8,
                data: nodes_data,//makeMapData(rawData),
                activeOpacity: 1,
                label: {
                    normal: {
                        formatter: '{b}',
                        position: 'right',
                        show: true
                    },
                    emphasis: {
                        show: true
                    }
                },
                //symbolSize: 10,
                symbolSize: function (data) {
                    return Math.max(5, data[2] / 5);
                },
                itemStyle: {
                    normal: {
                        borderColor: '#fff',
                        color: '#49B494',
                    }
                }
            }
            ]
        };
          myMapCharts.setOption(option);    
          }
        });
      }

      ajax_function();
      setInterval( ajax_function, 60000 );
    });
  
  //.col-md-12
      .hidden-xs.pull-right.btn-group
        //a.btn.btn-primary.btn-sm(href='live-map') #{settings.locale.livemap}
      h3
        a #{settings.locale.net_connections}
      p
        | #{settings.locale.snapshotreachable}&nbsp&nbsp
        span.timestamp #{snapshotlocaltime}
        | .
  .big.col-md-2.text-center
      br
      p.text-muted #{settings.locale.net_connections}
      h3 #{bitnodeslist.total_nodes}
      p.text-muted #{settings.locale.height}
      h3 #{bitnodeslist.latest_height}
      br

  .col-xs-12.col-md-8
    //.row.text-center(style='margin-bottom:15px;')
      //i #{settings.locale.net_warning}
    .tabpanel
      ul.nav.nav-tabs(role='tablist')
        li.active(role='presentation')
          a(href='#useragent', aria-controls='useragent', role='tab', data-toggle='tab') #{settings.locale.useragent}
        li(role='presentation')
          a(href='#country', aria-controls='country', role='tab', data-toggle='tab') #{settings.locale.net_country}
        li(role='presentation')
          a(href='#networks', aria-controls='networks', role='tab', data-toggle='tab') #{settings.locale.network}
    .tab-content
      #useragent.tabpanel.tab-pane.active 
        include ./includes/rl_bitnodes_useragent.jade
      #country.tabpanel.tab-pane 
        include ./includes/rl_bitnodes_country.jade
      #networks.tabpanel.tabpanel.tab-pane 
        include ./includes/rl_bitnodes_network.jade

  .row
      .col-md-offset-5.col-md-2
        label #{settings.locale.livemap}
      .col-md-offset-5
      .col-md-offset-1.col-md-10
        #mapChart(style='width: 100%; height: 600px;')

  .col-md-12(style="margin-bottom: 4%")
    .panel.panel-default
      .panel-heading
        strong #{settings.locale.net_connections}
      table#nodes-table.table.table-bordered.table-striped
        thead
          tr
            th.text-center #{settings.locale.timestamp}
            th.text-center #{settings.locale.tx_address}
            th.text-center #{settings.locale.net_subversion}
            th.text-center #{settings.locale.height}
            th.text-center #{settings.locale.net_country}
            th.text-center #{settings.locale.city}
            th.text-center #{settings.locale.network}
        tbody.text-center

  //.col-md-12(style="margin-bottom: 4%")
    .panel.panel-default
      .panel-heading
        strong #{settings.locale.cold_staking_wallet_nodes}
      table#cold-wallet-nodes-table.table.table-bordered.table-striped
        thead
          tr
            th.text-center #{settings.locale.tx_address}
            th.text-center #{settings.locale.cold_staking_nodes}
            th.text-center #{settings.locale.menu_reward}
            th.text-center #{settings.locale.staking_coin}
            //th.text-center #{settings.locale.rl_balance}
        tbody.text-center

  //.col-md-12(style="margin-bottom: 4%")
    .panel.panel-default
      .panel-heading
        strong #{settings.locale.cold_staking_nodes}
      table#cold-staking-nodes-table.table.table-bordered.table-striped
        thead
          tr
            th.text-center #{settings.locale.timestamp}
            th.text-center #{settings.locale.tx_address}
            th.text-center #{settings.locale.net_subversion}
            th.text-center #{settings.locale.height}
            th.text-center #{settings.locale.net_country}
            th.text-center #{settings.locale.city}
            th.text-center #{settings.locale.network}
            th.text-center #{settings.locale.staking_coin}
        tbody.text-center
  
