extends layout
block content
  script.
    //$('#reachablenodes').text( 1 );
    $(document).ready(function() {
      alert('test');
      var charturl = '/bitcoin/api/vpubboard';
      if(#{days} != 1)
      {
        charturl = charturl + '?&days=' + #{days};
        //alert(#{days});
      }
      
      alert(charturl);
      var reqajax = $.ajax ({
        url: charturl,
        success: function( result ) {
          var startTime = new Date().getTime()/1000;//result.times;
          //alert('test2');
          function riqigeshi(now, daysnum){
            //alert(daysnum);
            var date = new Date(now*1000);
            if(daysnum != 1)
            {
              return date.toLocaleDateString();  
            }
            else
            {
              return date.toLocaleDateString() + ' ' + date.getHours() + date.toLocaleTimeString().substr(-6,6);
            }
          }
          //alert('test3');
          var timeArray = [];
          var timeNum = #{days}*48;
          var tmpTime = 0;
          var tmpDays = #{days};
          var strTimeArray = [];
          var strTmpTime = '';
          for(var i = 0; i < timeNum; i++)
          {
            tmpTime = startTime - timeNum * 1800 + i * 1800;
            timeArray.push(tmpTime);
            strTmpTime = riqigeshi(tmpTime, tmpDays);
            strTimeArray.push(strTmpTime);
          }
          
          var seriesData = [];
          var agentNodes = [];
          var agentNodesArray = [];

          var totalNodes = 0;
          var lastNodes = 0;
          var lastCheckTimeIndex = 0;
          for(timeKey in result.agents)
          {
            //alert(timeKey);
            var agentsPerTimeArray = result.agents[timeKey];
            //alert('length=' + agentsPerTimeArray.length);
            for(var j = 0; j < agentsPerTimeArray.length; j++)
            {
              //alert('test9');
              for(versionKey in agentsPerTimeArray[j])
              {
                //alert('test10');
                var nodesNum = agentsPerTimeArray[j][versionKey];
                totalNodes = totalNodes + nodesNum;
                if(!agentNodes.hasOwnProperty(versionKey))
                {
                  lastCheckTimeIndex = 0;
                  //alert('test11');
                  var nodesItem = [];
                  for(var k = 0; k < timeArray.length; k++)
                  {
                    nodesItem[k] = 0;
                  }

                  agentNodes[versionKey] = nodesItem;

                  var l = 0;
                  for(l = 0; l < timeArray.length; l++)
                  {
                    if(timeKey < timeArray[l])
                    {
                      agentNodes[versionKey][l] = nodesNum;
                      //alert('1');
                      //alert('time=' + timeKey + 'nodenum=' + nodesNum);
                      lastCheckTimeIndex = l;
                      if(l == 0)
                      {
                        lastNodes += nodesNum;
                      }
                      break;   
                    }
                  }
                }
                else
                {
                  var nodesItem = agentNodes[versionKey];
                  var k = 0;
                  //alert('lastcheckindex=' + lastCheckTimeIndex); 
                  for(k = lastCheckTimeIndex+1; k < timeArray.length; k++)
                  {
                    //alert(timeKey);
                    //alert(timeArray[k-1]);
                    //alert(timeKey[k]);
                    if(timeKey >= timeArray[k-1] && timeKey <= timeArray[k])
                    {
                      agentNodes[versionKey][k] = nodesNum;
                      //alert('time=' + timeKey + 'nodenum=' + nodesNum);
                      lastCheckTimeIndex = k;
                      //alert('22');
                      //alert(nodesNum);
                      break;
                    }
                  }
                  
                }
              }              
            }
          }
          //alert('test12');
          $('#reachable-nodes').text( result.nodes[0] );
          $('#average-nodes').text((totalNodes/timeNum + 0.5).toFixed(0));
          $('#last-nodes').text(lastNodes);


          for(key in agentNodes)
          {
            var nodeItem = agentNodes[key];
            var item = [];
            //alert(key);
            //alert(nodeItem);
            //alert(nodeItem.length);
            for(var i = 0; i < nodeItem.length; i++)
            {
              item.push(nodeItem[i]);
              //alert(nodeItem[i]);
            }
            agentNodesArray[key] = item;
          }
          alert('test13');
          var colorArray = ['#FF3030','#7FFF00','#912CEE','#87CEEB','#EEEE00'];
          var colorIndex = 0;
          for(key in agentNodesArray)
          {
            var item = {
              name: key,
              type:'line',
              smooth: true,
              itemStyle: {normal: {areaStyle: {type: 'default'},label: {formatter: null}}},
              lineStyle: {normal: {color: ''}},
              data: agentNodesArray[key]
            };
                //alert(agentnodes[key]);
            item.name = key;
            item.lineStyle.normal.color = colorArray[colorIndex];
            colorIndex++;
            //item.data = agentnodes[key];
            item.itemStyle.normal.label.formatter = function (params) {
              //alert(params);
              return (params.value*100).toFixed(2)+'%';
            };
            seriesData.push(item);
          }
          alert('test14');

          var agentChart = echarts.init(document.getElementById('agentCharts'));
          //alert('test4');
          // 指定图表的配置项和数据
          var option = {
            backgroundColor: '#5F9EA0',//背景色
            title: {
              text: 'agent',
              subtext: 'charts'
            },
            tooltip: {
              trigger: 'axis',
              formatter:null
              //formatter:'{c}%'　　　　//这是关键，在需要的地方加上就行了
            },
            legend: {
                //data: agents
            },
            toolbox: {
              show : true,
              feature : {
                mark : {show: true},
                dataView : {show: true, readOnly: false},
                magicType : {show: true, type: ['line', 'bar', 'stack', 'tiled']},
                restore : {show: true},
                saveAsImage : {show: true}
              }
            },
            calculable : true,
            xAxis: {
              type : 'category',
              boundaryGap : false,
              data: strTimeArray
            },
            yAxis: {
              name : "nodes",
              type : 'value',
              axisLabel:{
                formatter: null
              },
              data : result.nodes
            },
            series: seriesData
          };
          
          //option.series[0].itemStyle.normal.label.formatter = function (params) {
            //  alert(params);
              //return (params.value*100).toFixed(2)+'%';
            //};
          //option.yAxis.axisLabel.formatter = function(value,index){
            //alert(value)
            //alert(index)
            //return (value*100).toFixed(2)+'%';
          //};
          //option.tooltip.formatter = function (params) {
            //alert(params);
            //return (params.value*100).toFixed(2)+'%';
          //};
          // 使用刚指定的配置项和数据显示图表。
          agentChart.setOption(option);

          {//network
            alert('test1');
            var seriesData = [];
            var asnsNodes = [];
            var asnsNodesArray = [];

            var lastCheckTimeIndex = 0;
            for(timeKey in result.asns)
            {
              //alert(timeKey);
              var asnsPerTimeArray = result.asns[timeKey];
              //alert('length=' + agentsPerTimeArray.length);
              for(var j = 0; j < asnsPerTimeArray.length; j++)
              {
                //alert('test9');
                for(versionKey in asnsPerTimeArray[j])
                {
                  //alert('test10');
                  var nodesNum = asnsPerTimeArray[j][versionKey];
                  if(!asnsNodes.hasOwnProperty(versionKey))
                  {
                    lastCheckTimeIndex = 0;
                    //alert('test11');
                    var nodesItem = [];
                    for(var k = 0; k < timeArray.length; k++)
                    {
                      nodesItem[k] = 0;
                    }

                    asnsNodes[versionKey] = nodesItem;

                    var l = 0;
                    for(l = 0; l < timeArray.length; l++)
                    {
                      if(timeKey < timeArray[l])
                      {
                        asnsNodes[versionKey][l] = nodesNum;
                        //alert('1');
                        //alert('time=' + timeKey + 'nodenum=' + nodesNum);
                        lastCheckTimeIndex = l;
                        if(l == 0)
                        {
                          lastNodes += nodesNum;
                        }
                        break;   
                      }
                    }
                  }
                  else
                  {
                    var nodesItem = asnsNodes[versionKey];
                    var k = 0;
                    //alert('lastcheckindex=' + lastCheckTimeIndex); 
                    for(k = lastCheckTimeIndex+1; k < timeArray.length; k++)
                    {
                      //alert(timeKey);
                      //alert(timeArray[k-1]);
                      //alert(timeKey[k]);
                      if(timeKey >= timeArray[k-1] && timeKey <= timeArray[k])
                      {
                        asnsNodes[versionKey][k] = nodesNum;
                        //alert('time=' + timeKey + 'nodenum=' + nodesNum);
                        lastCheckTimeIndex = k;
                        //alert('22');
                        //alert(nodesNum);
                        break;
                      }
                    }
                  
                  }
                }              
              }
            }

            for(key in asnsNodes)
            {
              var nodeItem = asnsNodes[key];
              var item = [];
              //alert(key);
              //alert(nodeItem);
              //alert(nodeItem.length);
              for(var i = 0; i < nodeItem.length; i++)
              {
                item.push(nodeItem[i]);
                //alert(nodeItem[i]);
              }
              asnsNodesArray[key] = item;
            }
            //alert('test13');
            var colorArray = ['#FF3030','#7FFF00','#912CEE','#87CEEB','#EEEE00'];
            var colorIndex = 0;
            for(key in asnsNodesArray)
            {
              var item = {
                name: key,
                type:'line',
                smooth: true,
                itemStyle: {normal: {areaStyle: {type: 'default'},label: {formatter: null}}},
                lineStyle: {normal: {color: ''}},
                data: asnsNodesArray[key]
              };
                //alert(agentnodes[key]);
              item.name = key;
              item.lineStyle.normal.color = colorArray[colorIndex];
              colorIndex++;
              
              item.itemStyle.normal.label.formatter = function (params) {
                //alert(params);
                return (params.value*100).toFixed(2)+'%';
              };
              seriesData.push(item);
            }
            alert('test14');

            var asnsChart = echarts.init(document.getElementById('asnsCharts'));
            //alert('test4');
            // 指定图表的配置项和数据
            var option = {
              backgroundColor: '#5F9EA0',//背景色
              title: {
                text: 'asns',
                subtext: 'charts'
              },
              tooltip: {
                trigger: 'axis',
                formatter:null
                //formatter:'{c}%'　　　　//这是关键，在需要的地方加上就行了
              },
              legend: {
                //data: agents
              },
              toolbox: {
                show : true,
                feature : {
                  mark : {show: true},
                  dataView : {show: true, readOnly: false},
                  magicType : {show: true, type: ['line', 'bar', 'stack', 'tiled']},
                  restore : {show: true},
                  saveAsImage : {show: true}
                }
              },
              calculable : true,
              xAxis: {
                type : 'category',
                boundaryGap : false,
                data: strTimeArray
              },
              yAxis: {
                name : "nodes",
                type : 'value',
                axisLabel:{
                  formatter: null
                },
                data : result.nodes
              },
              series: seriesData
            };
          
          // 使用刚指定的配置项和数据显示图表。
            asnsChart.setOption(option);
          }

          /*{//country
            var seriesdata = [];
            var countrysnodes = [];
            for(var i = 0; i < result.countrys.length; i++)
            {
              for(key in result.countrys[i][0])
              {
                var strnodes = result.countrys[i][0][key];*//*'(' + result.agents[i][0][key]/result.nodes[i]*100 + '%)';*/
               /* if(!countrysnodes.hasOwnProperty(key))
                {
                  var nodesitem = [];
                  nodesitem.push(strnodes);
                  countrysnodes[key] = nodesitem;
                }
                else
                {
                  countrysnodes[key].push(strnodes);
                }
              }
            }

            for(key in countrysnodes)
            {
              var item = {
                name: key,
                type:'line',
                smooth: true,
                itemStyle: {normal: {areaStyle: {type: 'default'},label: {formatter: null}}},
                data: countrysnodes[key]
              };
                //alert(agentnodes[key]);
              item.name = key;
              //item.data = agentnodes[key];
              item.itemStyle.normal.label.formatter = function (params) {
                alert(params);
                return (params.value*100).toFixed(2)+'%';
              };
              seriesdata.push(item);
            }

            var countrysChart = echarts.init(document.getElementById('countrysCharts'));*/
            //alert('test4');
            // 指定图表的配置项和数据
            /*var option = {
              backgroundColor: '#5F9EA0',//背景色
              title: {
                text: 'countrys',
                subtext: 'charts'
              },
              tooltip: {
                trigger: 'axis',
                formatter:null
                //formatter:'{c}%'　　　　//这是关键，在需要的地方加上就行了
              },
              legend: {
                //data: agents
              },
              toolbox: {
                show : true,
                feature : {
                  mark : {show: true},
                  dataView : {show: true, readOnly: false},
                  magicType : {show: true, type: ['line', 'bar', 'stack', 'tiled']},
                  restore : {show: true},
                  saveAsImage : {show: true}
                }
              },
              calculable : true,
              xAxis: {
                type : 'category',
                boundaryGap : false,
                data: strTime
              },
              yAxis: {
                name : "nodes",
                type : 'value',
                axisLabel:{
                  formatter: null
                },
                data : result.nodes
              },
              series: seriesdata
            };
            countrysChart.setOption(option);
          }

          {//network
            var networkChart = echarts.init(document.getElementById('networkCharts'));
            //alert('test4');
            // 指定图表的配置项和数据
            var option = {
              backgroundColor: '#5F9EA0',//背景色
              title: {
                text: 'network',
                subtext: 'charts'
              },
              tooltip: {
                trigger: 'axis',
                formatter:null
                //formatter:'{c}%'　　　　//这是关键，在需要的地方加上就行了
              },
              legend: {
                //data: agents
              },
              toolbox: {
                show : true,
                feature : {
                  mark : {show: true},
                  dataView : {show: true, readOnly: false},
                  magicType : {show: true, type: ['line', 'bar', 'stack', 'tiled']},
                  restore : {show: true},
                  saveAsImage : {show: true}
                }
              },
              calculable : true,
              xAxis: {
                type : 'category',
                boundaryGap : false,
                data: strTime
              },
              yAxis: {
                name : "nodes",
                type : 'value',
                axisLabel:{
                  formatter: null
                },
                data : result.nodes
              },
              series: {
                name: key,
                type:'line',
                smooth: true,
                itemStyle: {normal: {areaStyle: {type: 'default'},label: {formatter: null}}},
                data: result.nodes
              }
            };
            networkChart.setOption(option);
          }*/
        }
      });
    });

  .row
    .col-md-12
      .pull-left
        span.text-muted #{settings.locale.currectnodes}  
        h1#reachable-nodes

      .pull-left.hidden-xs
        .divider
      .pull-left.hidden-xs
        span.text-muted #{settings.locale.averagenodes}  
        h1#average-nodes
        
      .pull-left
        .divider
      .pull-left
        span.text-muted #{days} #{settings.locale.dayagonodes}
        h1#last-nodes
        

  .row
      .pull-right.btn-group
        a.btn.btn-primary.btn-sm(href='/charts/', disabled='disabled') 24h
        a.btn.btn-primary.btn-sm(href='/charts/?days=90') 90d
        a.btn.btn-primary.btn-sm(href='/charts/?days=365') 1y
        a.btn.btn-primary.btn-sm(href='/charts/?days=730') 2y
      
  .row
      .col-md-offset-5.col-md-2
        label agent
      .col-md-offset-5
      .col-md-offset-1.col-md-10
        #agentCharts(style='width: 100%; height: 300px;')

  .row
      .col-md-offset-5.col-md-2
        label asns
      .col-md-offset-5
      .col-md-offset-1.col-md-10
        #asnsCharts(style='width: 100%; height: 300px;')