extends layout
block content
  script.
    //$('#reachablenodes').text( 1 );
    $(document).ready(function() {
      var charturl = '/bitcoin/api/vpubboard';
      if(#{days} != 1)
      {
        charturl = charturl + '?&days=' + #{days};
      }
      
      var reqajax = $.ajax ({
        url: charturl,
        success: function( result ) {
          var startTime = new Date().getTime()/1000;//result.times;
          function riqigeshi(now, daysnum){
            var date = new Date(now*1000);
            if(daysnum != 1)
            {
              return date.toLocaleDateString();  
            }
            else
            {
              return date.toLocaleDateString() + ' ' + date.getHours() + date.toLocaleTimeString().substr(-6,6);
            }
          }
          var timeArray = [];
          var timeNum = #{days}*48;
          var tmpTime = 0;
          var tmpDays = #{days};
          var strTimeArray = [];
          var strTmpTime = '';
          for(var i = 0; i < timeNum; i++)
          {
            tmpTime = startTime - timeNum * 1800 + i * 1800;
            timeArray.push(tmpTime);
            strTmpTime = riqigeshi(tmpTime, tmpDays);
            strTimeArray.push(strTmpTime);
          }
          
          var seriesData = [];
          var agentNodes = [];
          var agentNodesArray = [];
          var agentKeys = [];

          var totalNodes = 0;
          var lastNodes = 0;
          var lastCheckTimeIndex = 0;
          for(timeKey in result.agents)
          {
            var agentsPerTimeArray = result.agents[timeKey];
            for(var j = 0; j < agentsPerTimeArray.length; j++)
            {
              for(versionKey in agentsPerTimeArray[j])
              {
                var nodesNum = agentsPerTimeArray[j][versionKey];
                totalNodes = totalNodes + nodesNum;
                if(!agentNodes.hasOwnProperty(versionKey))
                {
                  lastCheckTimeIndex = 0;
                  var nodesItem = [];
                  for(var k = 0; k < timeArray.length; k++)
                  {
                    nodesItem[k] = 0;
                  }

                  agentNodes[versionKey] = nodesItem;
                  agentKeys.push(versionKey);

                  var l = 0;
                  for(l = 0; l < timeArray.length; l++)
                  {
                    if(timeKey < timeArray[l])
                    {
                      agentNodes[versionKey][l] = nodesNum;
                      lastCheckTimeIndex = l;
                      if(l == 0)
                      {
                        lastNodes += nodesNum;
                      }
                      break;   
                    }
                  }
                }
                else
                {
                  var nodesItem = agentNodes[versionKey];
                  var k = 0;
                  for(k = lastCheckTimeIndex+1; k < timeArray.length; k++)
                  {
                    if(timeKey >= timeArray[k-1] && timeKey <= timeArray[k])
                    {
                      agentNodes[versionKey][k] = nodesNum;
                      lastCheckTimeIndex = k;
                      break;
                    }
                  }
                  
                }
              }              
            }
          }
          $('#reachable-nodes').text( result.nodes[0] );
          var averageNodes = (totalNodes/timeNum + 0.5).toFixed(0);
          $('#average-nodes').text(averageNodes);
          $('#last-nodes').text(lastNodes);


          for(key in agentNodes)
          {
            var nodeItem = agentNodes[key];
            var item = [];
            for(var i = 0; i < nodeItem.length; i++)
            {
              item.push(nodeItem[i]);
            }
            agentNodesArray[key] = item;
          }
          var colorArray = ['#FF3030','#7FFF00','#912CEE','#87CEEB','#EEEE00'];
          var colorIndex = 0;
          for(key in agentNodesArray)
          {
            var item = {
              name: key,
              type:'line',
              smooth: true,
              itemStyle: {normal: {areaStyle: {type: 'default'},label: {formatter: null}}},
              lineStyle: {normal: {color: ''}},
              data: agentNodesArray[key]
            };
            item.name = key;
            item.lineStyle.normal.color = colorArray[colorIndex];
            colorIndex++;
            item.itemStyle.normal.label.formatter = function (params) {
              return (params.value*100).toFixed(2)+'%';
            };
            seriesData.push(item);
          }

          var agentChart = echarts.init(document.getElementById('agentCharts'));
          // 指定图表的配置项和数据
          var option = {
            backgroundColor: '#5F9EA0',//背景色
            title: {
              text: '',
              subtext: ''
            },
            tooltip: {
              trigger: 'axis',
              formatter:null
              //formatter:'{c}%'　　　　//这是关键，在需要的地方加上就行了
            },
            legend: {
              data: agentKeys
            },
            toolbox: {
              show : true,
              feature : {
                mark : {show: true},
                dataView : {show: true, readOnly: false},
                magicType : {show: true, type: ['line', 'bar', 'stack', 'tiled']},
                restore : {show: true},
                saveAsImage : {show: true}
              }
            },
            calculable : true,
            xAxis: {
              type : 'category',
              boundaryGap : false,
              data: strTimeArray
            },
            yAxis: {
              name : "",
              type : 'value',
              axisLabel:{
                formatter: null
              },
              data : result.nodes
            },
            series: seriesData
          };
          
          // 使用刚指定的配置项和数据显示图表。
          agentChart.setOption(option);

          {//asns
            var seriesData = [];
            var asnsNodes = [];
            var asnsKeys = [];
            var asnsNodesArray = [];

            var lastCheckTimeIndex = 0;
            for(timeKey in result.asns)
            {
              var asnsPerTimeArray = result.asns[timeKey];
              for(var j = 0; j < asnsPerTimeArray.length; j++)
              {
                for(versionKey in asnsPerTimeArray[j])
                {
                  var nodesNum = asnsPerTimeArray[j][versionKey];
                  if(!asnsNodes.hasOwnProperty(versionKey))
                  {
                    lastCheckTimeIndex = 0;
                    var nodesItem = [];
                    for(var k = 0; k < timeArray.length; k++)
                    {
                      nodesItem[k] = 0;
                    }

                    asnsNodes[versionKey] = nodesItem;
                    asnsKeys.push(versionKey);

                    var l = 0;
                    for(l = 0; l < timeArray.length; l++)
                    {
                      if(timeKey < timeArray[l])
                      {
                        asnsNodes[versionKey][l] = nodesNum;
                        lastCheckTimeIndex = l;
                        if(l == 0)
                        {
                          lastNodes += nodesNum;
                        }
                        break;   
                      }
                    }
                  }
                  else
                  {
                    var nodesItem = asnsNodes[versionKey];
                    var k = 0; 
                    for(k = lastCheckTimeIndex+1; k < timeArray.length; k++)
                    {
                      if(timeKey >= timeArray[k-1] && timeKey <= timeArray[k])
                      {
                        asnsNodes[versionKey][k] = nodesNum;
                        lastCheckTimeIndex = k;
                        break;
                      }
                    }
                  }
                }              
              }
            }

            for(key in asnsNodes)
            {
              var nodeItem = asnsNodes[key];
              var item = [];
              for(var i = 0; i < nodeItem.length; i++)
              {
                item.push(nodeItem[i]);
              }
              asnsNodesArray[key] = item;
            }
            var colorArray = ['#FF3030','#7FFF00','#912CEE','#87CEEB','#EEEE00'];
            var colorIndex = 0;
            for(key in asnsNodesArray)
            {
              var item = {
                name: key,
                type:'line',
                smooth: true,
                itemStyle: {normal: {areaStyle: {type: 'default'},label: {formatter: null}}},
                lineStyle: {normal: {color: ''}},
                data: asnsNodesArray[key]
              };
              item.name = key;
              item.lineStyle.normal.color = colorArray[colorIndex];
              colorIndex++;
              
              item.itemStyle.normal.label.formatter = function (params) {
                return (params.value*100).toFixed(2)+'%';
              };
              seriesData.push(item);
            }

            var asnsChart = echarts.init(document.getElementById('asnsCharts'));
            // 指定图表的配置项和数据
            var option = {
              backgroundColor: '#5F9EA0',//背景色
              title: {
                text: '',
                subtext: ''
              },
              tooltip: {
                trigger: 'axis',
                formatter:null
                //formatter:'{c}%'　　　　//这是关键，在需要的地方加上就行了
              },
              legend: {
                data: asnsKeys
              },
              toolbox: {
                show : true,
                feature : {
                  mark : {show: true},
                  dataView : {show: true, readOnly: false},
                  magicType : {show: true, type: ['line', 'bar', 'stack', 'tiled']},
                  restore : {show: true},
                  saveAsImage : {show: true}
                }
              },
              calculable : true,
              xAxis: {
                type : 'category',
                boundaryGap : false,
                data: strTimeArray
              },
              yAxis: {
                name : "",
                type : 'value',
                axisLabel:{
                  formatter: null
                },
                data : result.nodes
              },
              series: seriesData
            };
          
            // 使用刚指定的配置项和数据显示图表。
            asnsChart.setOption(option);
          }

          {//country
            var seriesData = [];
            var countryNodes = [];
            var countryKeys = [];
            var countryNodesArray = [];

            var lastCheckTimeIndex = 0;
            for(timeKey in result.countrys)
            {
              var countryPerTimeArray = result.countrys[timeKey];
              for(var j = 0; j < countryPerTimeArray.length; j++)
              {
                for(versionKey in countryPerTimeArray[j])
                {
                  var nodesNum = countryPerTimeArray[j][versionKey];
                  if(!countryNodes.hasOwnProperty(versionKey))
                  {
                    lastCheckTimeIndex = 0;
                    var nodesItem = [];
                    for(var k = 0; k < timeArray.length; k++)
                    {
                      nodesItem[k] = 0;
                    }

                    countryNodes[versionKey] = nodesItem;
                    countryKeys.push(versionKey);

                    var l = 0;
                    for(l = 0; l < timeArray.length; l++)
                    {
                      if(timeKey < timeArray[l])
                      {
                        countryNodes[versionKey][l] = nodesNum;
                        lastCheckTimeIndex = l;
                        if(l == 0)
                        {
                          lastNodes += nodesNum;
                        }
                        break;   
                      }
                    }
                  }
                  else
                  {
                    var nodesItem = countryNodes[versionKey];
                    var k = 0;
                    for(k = lastCheckTimeIndex+1; k < timeArray.length; k++)
                    {
                      if(timeKey >= timeArray[k-1] && timeKey <= timeArray[k])
                      {
                        countryNodes[versionKey][k] = nodesNum;
                        lastCheckTimeIndex = k;
                        break;
                      }
                    }
                  }
                }              
              }
            }
            for(key in countryNodes)
            {
              var nodeItem = countryNodes[key];
              var item = [];
              for(var i = 0; i < nodeItem.length; i++)
              {
                item.push(nodeItem[i]);
              }
              countryNodesArray[key] = item;
            }
            var colorArray = ['#FF3030','#7FFF00','#912CEE','#87CEEB','#EEEE00'];
            var colorIndex = 0;
            for(key in countryNodesArray)
            {
              var item = {
                name: key,
                type:'line',
                smooth: true,
                itemStyle: {normal: {areaStyle: {type: 'default'},label: {formatter: null}}},
                lineStyle: {normal: {color: ''}},
                data: countryNodesArray[key]
              };
              item.name = key;
              item.lineStyle.normal.color = colorArray[colorIndex];
              colorIndex++;
              
              item.itemStyle.normal.label.formatter = function (params) {
                return (params.value*100).toFixed(2)+'%';
              };
              seriesData.push(item);
            }
            var countryChart = echarts.init(document.getElementById('countryCharts'));
            // 指定图表的配置项和数据
            var option = {
              backgroundColor: '#5F9EA0',//背景色
              title: {
                text: '',
                subtext: ''
              },
              tooltip: {
                trigger: 'axis',
                formatter:null
                //formatter:'{c}%'　　　　//这是关键，在需要的地方加上就行了
              },
              legend: {
                data: countryKeys
              },
              toolbox: {
                show : true,
                feature : {
                  mark : {show: true},
                  dataView : {show: true, readOnly: false},
                  magicType : {show: true, type: ['line', 'bar', 'stack', 'tiled']},
                  restore : {show: true},
                  saveAsImage : {show: true}
                }
              },
              calculable : true,
              xAxis: {
                type : 'category',
                boundaryGap : false,
                data: strTimeArray
              },
              yAxis: {
                name : "",
                type : 'value',
                axisLabel:{
                  formatter: null
                },
                data : result.nodes
              },
              series: seriesData
            };
            countryChart.setOption(option);
          }

          {//total
            var seriesData = [];
            var totalNodes = [];
            var low = 65535;
            var high = 0;
            
            for(var i = 0; i < timeArray.length; i++)
            {
              totalNodes[i] = 0;
            }
            var lastCheckTimeIndex = 0;
            for(timeKey in result.total)
            {
              var nodesNum = result.total[timeKey];
              var k = 0;
              if(nodesNum < low)
              {
                low = nodesNum;
              }
              if(nodesNum > high)
              {
                high = nodesNum;
              }
              if(timeKey < timeArray[0])
              {
                totalNodes[0] = nodesNum;
                lastCheckTimeIndex = k;
                continue;
              }
              for(k = lastCheckTimeIndex+1; k < timeArray.length; k++)
              {
                if(timeKey >= timeArray[k-1] && timeKey <= timeArray[k])
                {
                  totalNodes[k] = nodesNum;
                  lastCheckTimeIndex = k;
                  break;
                }
              } 
            }

            $('#low-nodes').text( low );
            $('#high-nodes').text( high );
            
            var item = {
              name: '',
              type:'line',
              smooth: true,
              itemStyle: {normal: {areaStyle: {type: 'default'},label: {formatter: null}}},
              lineStyle: {normal: {color: ''}},
              data: totalNodes
            };
            item.name = '可用节点';
            var legendData = [];
            legendData.push(item.name);
            item.lineStyle.normal.color = '#FF3030';
              
            item.itemStyle.normal.label.formatter = function (params) {
              return (params.value*100).toFixed(2)+'%';
            };
            seriesData.push(item);
            $('#total-text').text( '最低 ' + low + ' 最高 ' + high + ' 平均 ' + averageNodes + ' 最新 ' + result.nodes[0]);

            var totalChart = echarts.init(document.getElementById('totalCharts'));
            // 指定图表的配置项和数据
            var option = {
              backgroundColor: '#5F9EA0',//背景色
              title: {
                text: '',
                subtext: ''
              },
              tooltip: {
                trigger: 'axis',
                formatter:null
                //formatter:'{c}%'　　　　//这是关键，在需要的地方加上就行了
              },
              legend: {
                data: legendData
              },
              toolbox: {
                show : true,
                feature : {
                  mark : {show: true},
                  dataView : {show: true, readOnly: false},
                  magicType : {show: true, type: ['line', 'bar', 'stack', 'tiled']},
                  restore : {show: true},
                  saveAsImage : {show: true}
                }
              },
              calculable : true,
              xAxis: {
                type : 'category',
                boundaryGap : false,
                data: strTimeArray
              },
              yAxis: {
                name : "",
                type : 'value',
                axisLabel:{
                  formatter: null
                },
                data : result.nodes
              },
              series: seriesData
            };
            totalChart.setOption(option);
          }
        }
      });
    });

  .container
      .row
        .col-md-12
          hr.simple(color='#6f5499')
          .pull-left
            span.text-muted #{settings.locale.currectnodes}
            h1#reachable-nodes  
          .pull-left.hidden-xs
            .divider
          .pull-left.hidden-xs
            span.text-muted #{settings.locale.averagenodes}
            h1#average-nodes
          .pull-left
            .divider
          .pull-left
            span.text-muted #{days} #{settings.locale.dayagonodes}
            h1#last-nodes
        
      .col-md-12
        hr.simple(color='#EBEBEB')
        .pull-right.btn-group
          a.btn.btn-primary.btn-sm(href='/charts/', disabled='disabled') 24#{settings.locale.hours}
          a.btn.btn-primary.btn-sm(href='/charts/?days=90') 90#{settings.locale.days}
          a.btn.btn-primary.btn-sm(href='/charts/?days=365') 1#{settings.locale.years}
          a.btn.btn-primary.btn-sm(href='/charts/?days=730') 2#{settings.locale.years}
        h3
          a #{settings.locale.networkavailability}
        p
          | #{settings.locale.networkavailabilitynotes}
        
      

      .col-md-12
        .pull-right
          span#total-text
          
    .row
      .col-md-offset-5.col-md-2
      .col-md-offset-5
      .col-md-offset-1.col-md-10
        #totalCharts(style='width: 100%; height: 300px;')

    .container
      .col-md-12
        hr.simple(color='#7A7A7A')
        h3
          a #{settings.locale.useragent}
        p
          | #{settings.locale.agentsnotes}

    .row  
      .col-md-offset-5.col-md-2
      .col-md-offset-5
      .col-md-offset-1.col-md-10
        #agentCharts(style='width: 100%; height: 300px;')

    .container
      .col-md-12
        hr.simple(color='#7A7A7A')
        h3
          a ASNS
        p
          | #{settings.locale.asnsnotes}

    .row
      .col-md-offset-5.col-md-2
      .col-md-offset-5
      .col-md-offset-1.col-md-10
        #asnsCharts(style='width: 100%; height: 300px;')

    .container
      .col-md-12
        hr.simple(color='#7A7A7A')
        h3
          a #{settings.locale.net_country}
        p
          | #{settings.locale.countrynotes}

  .row
      .col-md-offset-5.col-md-2
      .col-md-offset-5
      .col-md-offset-1.col-md-10
        #countryCharts(style='width: 100%; height: 300px;')
